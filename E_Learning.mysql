CREATE TABLE COURSES (
    COURSE_ID INT AUTO_INCREMENT PRIMARY KEY,
    COURSE_NAME VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(500),
    DURATION INT, -- Duration in hours
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE STUDENTS (
    STUDENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    REGISTERED_AT DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ENROLLMENTS (
    ENROLLMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    COURSE_ID INT,
    STUDENT_ID INT,
    ENROLLMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (COURSE_ID, STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID)
);

CREATE TABLE PROGRESS (
    PROGRESS_ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT,
    COURSE_ID INT,
    COMPLETION_PERCENTAGE DECIMAL(5, 2) DEFAULT 0 CHECK (COMPLETION_PERCENTAGE BETWEEN 0 AND 100),
    UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

CREATE TABLE ASSESSMENTS (
    ASSESSMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT,
    COURSE_ID INT,
    SCORE DECIMAL(5, 2),
    ASSESSMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

DELIMITER //

CREATE PROCEDURE ADD_COURSE(
    IN COURSE_NAME VARCHAR(100), 
    IN DESCRIPTION VARCHAR(500), 
    IN DURATION INT
)
BEGIN
    INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION)
    VALUES (COURSE_NAME, DESCRIPTION, DURATION);
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GET_COURSES()
BEGIN
    SELECT * FROM COURSES;
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE ENROLL_STUDENT(
    IN COURSE_ID INT, 
    IN STUDENT_ID INT
)
BEGIN
    INSERT INTO ENROLLMENTS (COURSE_ID, STUDENT_ID)
    VALUES (COURSE_ID, STUDENT_ID);
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GET_ENROLLED_STUDENTS(
    IN COURSE_ID INT
)
BEGIN
    SELECT S.NAME 
    FROM STUDENTS S
    JOIN ENROLLMENTS E ON S.STUDENT_ID = E.STUDENT_ID
    WHERE E.COURSE_ID = COURSE_ID;
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE UPDATE_PROGRESS(
    IN STUDENT_ID INT, 
    IN COURSE_ID INT, 
    IN COMPLETION_PERCENTAGE DECIMAL(5, 2)
)
BEGIN
    UPDATE PROGRESS
    SET COMPLETION_PERCENTAGE = COMPLETION_PERCENTAGE, UPDATED_AT = NOW()
    WHERE STUDENT_ID = STUDENT_ID AND COURSE_ID = COURSE_ID;
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GET_PROGRESS(
    IN STUDENT_ID INT, 
    IN COURSE_ID INT
)
BEGIN
    SELECT COMPLETION_PERCENTAGE, UPDATED_AT
    FROM PROGRESS
    WHERE STUDENT_ID = STUDENT_ID AND COURSE_ID = COURSE_ID;
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE ADD_ASSESSMENT(
    IN STUDENT_ID INT, 
    IN COURSE_ID INT, 
    IN SCORE DECIMAL(5, 2)
)
BEGIN
    INSERT INTO ASSESSMENTS (STUDENT_ID, COURSE_ID, SCORE)
    VALUES (STUDENT_ID, COURSE_ID, SCORE);
END;
//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GET_ASSESSMENTS(
    IN STUDENT_ID INT, 
    IN COURSE_ID INT
)
BEGIN
    SELECT SCORE, ASSESSMENT_DATE
    FROM ASSESSMENTS
    WHERE STUDENT_ID = STUDENT_ID AND COURSE_ID = COURSE_ID;
END;
//

DELIMITER ;


-- Insert sample courses
INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION) 
VALUES ('PL/SQL Basics', 'Learn PL/SQL programming', 20);

INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION) 
VALUES ('Advanced PL/SQL', 'Master advanced concepts of PL/SQL', 30);

-- Insert sample students
INSERT INTO STUDENTS (NAME, EMAIL) 
VALUES ('Alice', 'alice@example.com');

INSERT INTO STUDENTS (NAME, EMAIL) 
VALUES ('Bob', 'bob@example.com');

CALL ADD_COURSE('Database Design', 'Learn to design efficient databases', 25);

CALL GET_COURSES();

CALL ENROLL_STUDENT(1, 1); -- Enroll Alice in Course 1

CALL GET_ENROLLED_STUDENTS(1); -- Get students in Course 1

CALL UPDATE_PROGRESS(1, 1, 50); -- Update Alice's progress for Course 1

CALL GET_PROGRESS(1, 1); -- Get Alice's progress for Course 1

CALL ADD_ASSESSMENT(1, 1, 85); -- Add an assessment for Alice in Course 1

CALL GET_ASSESSMENTS(1, 1); -- Get assessments for Alice in Course 1



 



